@page "/authors/edit/{id:int}"
@using Domain.Dtos.AuthorDto
@using Infrastructure.Interfaces
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IAuthorService AuthorService

<h3 class="mb-4">Edit Author</h3>

<div class="card shadow rounded-4 p-4" style="max-width: 500px;">
    <EditForm FormName="EditAuthor" Model="author" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="mb-3">
            <label class="form-label">First Name</label>
            <InputText class="form-control" @bind-Value="author.Name"/>
        </div>

        <div class="mb-3">
            <label class="form-label">Age</label>
            <InputDate class="form-control" @bind-Value="author.BirthDate"/>
        </div>

        <div class="d-flex justify-content-between">
            <div>
                <button class="btn btn-primary mb-4" style="background-color: #4A3AFF">
                    + Add new
                </button>
            </div>
        </div>
    </EditForm>

</div>

@code {

    [Parameter] public int Id { get; set; }

    private GetAuthorDto author = new();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var response = await AuthorService.GetAuthorAsync(Id);
        author = response.Data!;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var updateAuthorDto = new UpdateAuthorDto()
            {
                Id = author.Id,
                Name = author.Name,
                BirthDate = author.BirthDate
            };
            var response = await AuthorService.UpdateAuthorAsync(updateAuthorDto.Id, updateAuthorDto);
            if (!response.IsSuccess)
            {
                errorMessage = response.Message!;
                return;
            }

            Navigation.NavigateTo("/authors");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
}
