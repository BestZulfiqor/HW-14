@page "/authors/create"
@using Domain.Dtos.AuthorDto
@using Infrastructure.Interfaces
@inject IAuthorService Service
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Create new author</h3>

<div class="card shadow rounded-4 p-4" style="max-width: 500px;">
    <EditForm FormName="CreateAuthor" Model="author" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>
        <div class="mb-3">
            <label class="form-label">Full name</label>
            <InputText class="form-control" @bind-Value="author.Name"></InputText>
            <ValidationMessage For="@(() => author.Name)" TValue="string"/>

        </div>
        <div class="mb-3">
            <label class="form-label">Birth date</label>
            <InputDate class="form-control" @bind-Value="author.BirthDate"></InputDate>
            <ValidationMessage For="@(() => author.BirthDate)" TValue="DateTime"/>
        </div>

        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-primary mb-4" style="background-color: #4A3AFF">
                Create
            </button>
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
    </EditForm>
</div>

@code {

    private CreateAuthorDto author = new();
    private string errorMessage = string.Empty;


    private async Task HandleValidSubmit()
    {
        try
        {
            author.BirthDate = author.BirthDate.ToUniversalTime();
            var response = await Service.AddAuthorAsync(author);
            if (!response.IsSuccess)
            {
                errorMessage = response.Message;
                return;
            }

            Navigation.NavigateTo("authors");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMessage = "Unexpected error occurred while saving author.";
        }

    }

}
